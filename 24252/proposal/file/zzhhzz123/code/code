{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM08CAH2WmCD6ry9dkoqsy7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EPkT_MVQrDgX","executionInfo":{"status":"ok","timestamp":1750096172338,"user_tz":-480,"elapsed":3025,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"d7ab711e-579b-48f7-8768-2515ec6fe650"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","✅ 数据加载成功 | 行数: 3000, 列数: 24\n","🔍 前5行数据预览：\n","       Case_ID Date_Reported  Region   Country Pollutant_Type  \\\n","0  CASE_100000    2024-09-12  Africa  Pakistan           Lead   \n","1  CASE_100001    2024-01-01  Africa   Germany           Lead   \n","2  CASE_100002    2025-02-24  Europe   Germany           Lead   \n","3  CASE_100003    2024-09-24    Asia       USA           Lead   \n","4  CASE_100004    2023-05-24  Africa     India       Chromium   \n","\n","   Pollutant_Concentration_mg_kg  Soil_pH  Temperature_C  Humidity_%  \\\n","0                          78.04     8.30           35.6        64.9   \n","1                          16.33     7.96           31.0        73.1   \n","2                         167.33     5.35           16.4        33.8   \n","3                          89.23     5.66           31.4        30.5   \n","4                          93.93     7.64           17.0        58.6   \n","\n","   Rainfall_mm  ... Soil_Texture Soil_Organic_Matter_%  \\\n","0         62.4  ...        Sandy                  1.98   \n","1          8.2  ...        Silty                  9.71   \n","2        121.7  ...         Clay                  5.49   \n","3        116.9  ...        Silty                  3.98   \n","4        237.0  ...        Loamy                  0.94   \n","\n","               Disease_Type Disease_Severity       Health_Symptoms  \\\n","0  Gastrointestinal Disease         Moderate  Breathing Difficulty   \n","1                    Cancer             Mild  Breathing Difficulty   \n","2  Gastrointestinal Disease           Severe                Nausea   \n","3     Neurological Disorder           Severe               Fatigue   \n","4              Skin Disease         Moderate  Breathing Difficulty   \n","\n","   Age_Group_Affected Gender_Most_Affected     Mitigation_Measure  \\\n","0              Adults                 Male  Government Regulation   \n","1             Elderly                 Both    Community Awareness   \n","2            Children                 Both       Soil Remediation   \n","3              Adults                 Male    Community Awareness   \n","4            Children               Female  Government Regulation   \n","\n","  Case_Resolved Follow_Up_Required  \n","0            No                Yes  \n","1           Yes                 No  \n","2           Yes                 No  \n","3           Yes                 No  \n","4           Yes                Yes  \n","\n","[5 rows x 24 columns]\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')  # 挂载云端硬盘（仅首次需要授权）\n","\n","import pandas as pd\n","\n","# 定义数据加载函数\n","def load_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        print(f\"✅ 数据加载成功 | 行数: {df.shape[0]}, 列数: {df.shape[1]}\")\n","        print(\"🔍 前5行数据预览：\")\n","        print(df.head())  # 更简洁的预览方式\n","        return df\n","    except Exception as e:\n","        print(f\"❌ 数据加载失败: {e}\")\n","        return None\n","\n","# 替换为你的实际路径（必须确保文件存在）\n","file_path = \"/content/drive/MyDrive/zxc/soil_pollution_diseases.csv\"\n","df = load_data(file_path)\n","\n","# 验证：如果加载失败，终止流程\n","if df is None:\n","    raise ValueError(\"数据加载失败，请检查路径或文件\")"]},{"cell_type":"code","source":["import numpy as np\n","\n","def preprocess_data(df):\n","    \"\"\"\n","    1. 缺失值处理：数值列→均值填充，分类列→众数填充\n","    2. 异常值标记：用IQR方法标记污染物浓度异常值\n","    \"\"\"\n","    df_processed = df.copy()  # 避免修改原数据\n","\n","    # 分离数值列和分类列\n","    numeric_cols = df_processed.select_dtypes(include=[np.number]).columns.tolist()\n","    categorical_cols = df_processed.select_dtypes(include=['object']).columns.tolist()\n","\n","    # 1. 缺失值处理\n","    # 数值列：均值填充\n","    if numeric_cols:\n","        from sklearn.impute import SimpleImputer\n","        num_imputer = SimpleImputer(strategy='mean')\n","        df_processed[numeric_cols] = num_imputer.fit_transform(df_processed[numeric_cols])\n","        print(f\"🔢 数值列（{numeric_cols}）已填充缺失值\")\n","\n","    # 分类列：众数填充\n","    if categorical_cols:\n","        cat_imputer = SimpleImputer(strategy='most_frequent')\n","        df_processed[categorical_cols] = cat_imputer.fit_transform(df_processed[categorical_cols])\n","        print(f\"🔤 分类列（{categorical_cols}）已填充缺失值\")\n","\n","    # 2. 异常值标记（以污染物浓度为例）\n","    if 'Pollutant_Concentration_mg_kg' in df_processed.columns:\n","        col = 'Pollutant_Concentration_mg_kg'\n","        Q1 = df_processed[col].quantile(0.25)\n","        Q3 = df_processed[col].quantile(0.75)\n","        IQR = Q3 - Q1\n","        lower_bound = Q1 - 1.5 * IQR\n","        upper_bound = Q3 + 1.5 * IQR\n","\n","        # 新增异常值标记列\n","        df_processed[f'{col}_outlier'] = df_processed[col].apply(\n","            lambda x: 1 if x > upper_bound or x < lower_bound else 0\n","        )\n","        print(f\"⚠️  检测到 {df_processed[f'{col}_outlier'].sum()} 个 {col} 异常值\")\n","\n","    return df_processed\n","\n","# 执行预处理\n","df_processed = preprocess_data(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QcleufvkrMtk","executionInfo":{"status":"ok","timestamp":1750096190921,"user_tz":-480,"elapsed":47,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"80c41953-f6bd-4534-ae55-de2b30a556b9"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["🔢 数值列（['Pollutant_Concentration_mg_kg', 'Soil_pH', 'Temperature_C', 'Humidity_%', 'Rainfall_mm', 'Soil_Organic_Matter_%']）已填充缺失值\n","🔤 分类列（['Case_ID', 'Date_Reported', 'Region', 'Country', 'Pollutant_Type', 'Crop_Type', 'Farming_Practice', 'Nearby_Industry', 'Water_Source_Type', 'Soil_Texture', 'Disease_Type', 'Disease_Severity', 'Health_Symptoms', 'Age_Group_Affected', 'Gender_Most_Affected', 'Mitigation_Measure', 'Case_Resolved', 'Follow_Up_Required']）已填充缺失值\n","⚠️  检测到 0 个 Pollutant_Concentration_mg_kg 异常值\n"]}]},{"cell_type":"code","source":["def feature_engineering(df):\n","    \"\"\"\n","    1. 区域编码（One-Hot）\n","    2. 构建污染物浓度 × 土壤pH交互特征\n","    3. 数值特征标准化\n","    \"\"\"\n","    df_fe = df.copy()\n","\n","    # 1. 区域编码（One-Hot）\n","    if 'Region' in df_fe.columns:\n","        region_dummies = pd.get_dummies(df_fe['Region'], prefix='Region')\n","        df_fe = pd.concat([df_fe, region_dummies], axis=1)\n","        df_fe = df_fe.drop('Region', axis=1)  # 删除原始分类列\n","        print(\"🌍 区域列已编码为One-Hot特征\")\n","\n","    # 2. 构建交互特征（污染物浓度 × 土壤pH）\n","    if 'Pollutant_Concentration_mg_kg' in df_fe.columns and 'Soil_pH' in df_fe.columns:\n","        df_fe['Pollutant_pH_Interaction'] = df_fe['Pollutant_Concentration_mg_kg'] * df_fe['Soil_pH']\n","        print(\"🔬 新增污染物浓度与pH交互特征\")\n","\n","    # 3. 数值特征标准化（提升模型收敛性）\n","    numeric_cols = df_fe.select_dtypes(include=[np.number]).columns.tolist()\n","    # 排除异常值标记列\n","    numeric_cols = [col for col in numeric_cols if not col.endswith('_outlier')]\n","\n","    if numeric_cols:\n","        from sklearn.preprocessing import StandardScaler\n","        scaler = StandardScaler()\n","        df_fe[numeric_cols] = scaler.fit_transform(df_fe[numeric_cols])\n","        print(f\"📏 数值列（{numeric_cols}）已标准化\")\n","\n","    return df_fe\n","\n","# 执行特征工程\n","df_fe = feature_engineering(df_processed)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IacbA1IIrSt7","executionInfo":{"status":"ok","timestamp":1750096222272,"user_tz":-480,"elapsed":47,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"3f85ca4d-1233-43ca-c816-d87746e37bd5"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["🌍 区域列已编码为One-Hot特征\n","🔬 新增污染物浓度与pH交互特征\n","📏 数值列（['Pollutant_Concentration_mg_kg', 'Soil_pH', 'Temperature_C', 'Humidity_%', 'Rainfall_mm', 'Soil_Organic_Matter_%', 'Pollutant_pH_Interaction']）已标准化\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","def split_data(df, target_col='Disease_Severity'):\n","    \"\"\"\n","    拆分特征（X）和标签（y），并按 8:2 划分训练集/测试集\n","    \"\"\"\n","    if target_col not in df.columns:\n","        print(f\"❌ 目标列 {target_col} 不存在\")\n","        return None, None, None, None\n","\n","    X = df.drop(target_col, axis=1)  # 特征\n","    y = df[target_col]               # 标签（假设是疾病严重程度）\n","\n","    # 分层抽样（保持类别分布一致）\n","    X_train, X_test, y_train, y_test = train_test_split(\n","        X, y, test_size=0.2, random_state=42, stratify=y\n","    )\n","\n","    print(f\"🔢 数据集划分完成 | 训练集: {X_train.shape}, 测试集: {X_test.shape}\")\n","    return X_train, X_test, y_train, y_test\n","\n","# 执行拆分（假设目标列是 'Disease_Severity'，需根据实际调整）\n","X_train, X_test, y_train, y_test = split_data(df_fe, target_col='Disease_Severity')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C46ookhhrS1L","executionInfo":{"status":"ok","timestamp":1750096763392,"user_tz":-480,"elapsed":12,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"ba8b956b-a0aa-492b-9bf1-5bf67fb870a5"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["🔢 数据集划分完成 | 训练集: (2400, 30), 测试集: (600, 30)\n"]}]},{"cell_type":"code","source":["# 最简验证：用随机数据测试训练流程\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# 生成随机分类数据\n","X, y = make_classification(n_samples=1000, n_features=10, random_state=42)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","def train_evaluate_model(X_train, y_train, X_test, y_test):\n","    print(\"🔵 进入训练函数\")\n","    model = RandomForestClassifier(n_estimators=10, random_state=42)\n","    model.fit(X_train, y_train)\n","    print(\"🏋️ 模型训练完成\")\n","\n","    y_pred = model.predict(X_test)\n","    print(f\"🎯 Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n","\n","    cm = confusion_matrix(y_test, y_pred)\n","    sns.heatmap(cm, annot=True, fmt='d')\n","    plt.show()\n","    return model\n","\n","# 执行\n","train_evaluate_model(X_train, y_train, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"JagUX65nrS3b","executionInfo":{"status":"ok","timestamp":1750098358597,"user_tz":-480,"elapsed":302,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"b8f8981b-1ff4-4e25-e080-90c44c576531"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["🔵 进入训练函数\n","🏋️ 模型训练完成\n","🎯 Accuracy: 0.86\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=10, random_state=42)"],"text/html":["<style>#sk-container-id-3 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-3 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-3 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-3 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-3 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-3 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-3 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-3 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-3 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-3 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-3 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-3 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-3 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-3 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-3 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-3 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-3 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(n_estimators=10, random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":[],"metadata":{"id":"sjT0h-CwrS5b","executionInfo":{"status":"ok","timestamp":1750098335113,"user_tz":-480,"elapsed":12,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","def optimize_model(X_train, y_train):\n","    \"\"\"\n","    用网格搜索优化随机森林超参数\n","    \"\"\"\n","    # 定义参数搜索范围\n","    param_grid = {\n","        'n_estimators': [50, 100, 200],  # 决策树数量\n","        'max_depth': [None, 10, 20],     # 树深度\n","        'min_samples_split': [2, 5],     # 节点分裂最小样本数\n","    }\n","\n","    model = RandomForestClassifier(random_state=42)\n","\n","    # 网格搜索（5折交叉验证）\n","    grid_search = GridSearchCV(\n","        model,\n","        param_grid,\n","        cv=5,\n","        scoring='accuracy',\n","        n_jobs=-1  # 并行加速\n","    )\n","    grid_search.fit(X_train, y_train)\n","\n","    # 输出最优参数和分数\n","    print(f\"🥇 最优参数: {grid_search.best_params_}\")\n","    print(f\"🥇 最优验证集准确率: {grid_search.best_score_:.4f}\")\n","\n","    return grid_search.best_estimator_  # 返回最优模型\n","\n","# 执行超参数调优\n","best_model = optimize_model(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nEm_dl5isEQc","executionInfo":{"status":"ok","timestamp":1750098379489,"user_tz":-480,"elapsed":18636,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"42361619-3cc9-42c7-ba22-4a7dc4b6e565"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["🥇 最优参数: {'max_depth': 10, 'min_samples_split': 5, 'n_estimators': 50}\n","🥇 最优验证集准确率: 0.9100\n"]}]},{"cell_type":"code","source":["# 独立测试（直接运行）\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score\n","import matplotlib.pyplot as plt\n","import time\n","\n","# 生成极小数据集（100样本）\n","X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# 模拟best_model\n","best_model = RandomForestClassifier(n_estimators=10, random_state=42).fit(X_train, y_train)\n","\n","# 你的函数（修正后）\n","def compare_models(X_train, y_train, X_test, y_test, best_model):\n","    print(\"🔴 函数已执行\")\n","    models = {\n","        'Random Forest': RandomForestClassifier(**best_model.get_params()),\n","        'XGBoost': XGBClassifier(n_estimators=10, random_state=42)\n","    }\n","\n","    results = {}\n","    for name, model in models.items():\n","        start = time.time()\n","        model.fit(X_train, y_train)\n","        print(f\"⏱️ {name} Training time consumption: {time.time() - start:.2f} s\")\n","\n","        y_pred = model.predict(X_test)\n","        results[name] = accuracy_score(y_test, y_pred)\n","        print(f\"🐾 {name} Accuracy: {results[name]:.2f}\")\n","\n","    plt.bar(results.keys(), results.values())\n","    plt.show()\n","    return results\n","\n","# 执行\n","compare_models(X_train, y_train, X_test, y_test, best_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":534},"id":"dHj2Gr6KrS7T","executionInfo":{"status":"ok","timestamp":1750276809209,"user_tz":-480,"elapsed":547,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"9323ba52-d061-45a6-c804-ff9b39814c67"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["🔴 函数已执行\n","⏱️ Random Forest Training time consumption: 0.03 s\n","🐾 Random Forest Accuracy: 0.90\n","⏱️ XGBoost Training time consumption: 0.03 s\n","🐾 XGBoost Accuracy: 1.00\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["{'Random Forest': 0.9, 'XGBoost': 1.0}"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# 独立测试（直接运行，无需依赖之前代码）\n","import pandas as pd\n","import numpy as np\n","from xgboost import XGBClassifier\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","\n","# 生成模拟数据\n","X, y = make_classification(\n","    n_samples=1000,\n","    n_features=10,\n","    n_informative=5,  # 5个特征有信息价值\n","    random_state=42\n",")\n","X = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(X.shape[1])])\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# 训练模型\n","best_model = XGBClassifier(n_estimators=100, random_state=42).fit(X_train, y_train)\n","\n","# 定义预测解释函数（带完整调试）\n","def predict_and_explain(best_model, X_test, y_test, top_n=5):\n","    print(\"🔴 函数已执行\")\n","    try:\n","        y_probs = best_model.predict_proba(X_test)[:, 1]\n","        high_risk_indices = y_probs.argsort()[-top_n:][::-1]\n","\n","        print(f\"🔴 High-risk index: {high_risk_indices}\")\n","        for i, idx in enumerate(high_risk_indices):\n","            sample = X_test.iloc[[idx]]\n","            risk_prob = y_probs[idx]\n","\n","            feat_importance = pd.Series(best_model.feature_importances_, index=X_test.columns)\n","            sample_impact = sample * feat_importance\n","            top_feat = sample_impact.T.sort_values(\n","                by=sample_impact.T.columns[0],\n","                ascending=False\n","            ).head(3)\n","\n","            print(f\"🚨 sample {idx} probability: {risk_prob:.2%}\")\n","            print(\"Key features:\\n\", top_feat)\n","\n","    except Exception as e:\n","        print(f\"❌ 错误: {e}\")\n","\n","# 执行测试\n","predict_and_explain(best_model, X_test, y_test, top_n=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kzQct4n8-AxK","executionInfo":{"status":"ok","timestamp":1750277513846,"user_tz":-480,"elapsed":861,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"bf1db2f6-9ca2-4c11-b78b-4b314606fcbc"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["🔴 函数已执行\n","🔴 High-risk index: [103 145 114 165 187]\n","🚨 sample 103 probability: 100.00%\n","Key features:\n","                 256\n","feature_3  0.404996\n","feature_6  0.169540\n","feature_5  0.120569\n","🚨 sample 145 probability: 100.00%\n","Key features:\n","                 914\n","feature_5  0.209429\n","feature_0  0.201142\n","feature_1  0.098021\n","🚨 sample 114 probability: 99.99%\n","Key features:\n","                  86\n","feature_9  0.591129\n","feature_4  0.556785\n","feature_0  0.158487\n","🚨 sample 165 probability: 99.99%\n","Key features:\n","                 668\n","feature_9  0.673371\n","feature_4  0.478950\n","feature_0  0.155558\n","🚨 sample 187 probability: 99.98%\n","Key features:\n","                 365\n","feature_5  0.394715\n","feature_0  0.125225\n","feature_6  0.070039\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from scipy.stats import ks_2samp\n","from sklearn.model_selection import train_test_split\n","from xgboost import XGBClassifier\n","from sklearn.datasets import make_classification\n","\n","# 1. 数据生成与准备\n","X, y = make_classification(\n","    n_samples=1000,\n","    n_features=10,\n","    n_informative=5,\n","    random_state=42\n",")\n","X = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(X.shape[1])])\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# 2. 训练模型（模拟已有模型）\n","best_model = XGBClassifier(n_estimators=100, random_state=42).fit(X_train, y_train)\n","\n","# 3. 特征分布漂移检测（修复版）\n","def detect_data_drift(X_train, X_test):\n","    \"\"\"\n","    用 KS 检验检测特征分布漂移\n","    \"\"\"\n","    # 确保输入是 DataFrame\n","    if not isinstance(X_train, pd.DataFrame):\n","        X_train = pd.DataFrame(X_train)\n","    if not isinstance(X_test, pd.DataFrame):\n","        X_test = pd.DataFrame(X_test)\n","\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    X_test_scaled = scaler.transform(X_test)\n","\n","    drift_report = {}\n","    for i, col in enumerate(X_train.columns):\n","        train_col_data = X_train_scaled[:, i]\n","        test_col_data = X_test_scaled[:, i]\n","        stat, p_val = ks_2samp(train_col_data, test_col_data)\n","        drift_report[col] = {\n","            'ks_statistic': stat,\n","            'p_value': p_val,\n","            'drift_detected': p_val < 0.05  # 显著性水平 5%\n","        }\n","\n","    # 构建结果 DataFrame\n","    drift_df = pd.DataFrame(drift_report).T\n","\n","    # 确保数据类型正确\n","    drift_df = drift_df.astype({\n","        'ks_statistic': float,\n","        'p_value': float,\n","        'drift_detected': bool\n","    })\n","\n","    # 过滤有漂移的特征\n","    drifted_features = drift_df[drift_df['drift_detected']]\n","\n","    # 可视化结果\n","    if not drifted_features.empty:\n","        plt.figure(figsize=(10, 6))\n","        ax = drifted_features['ks_statistic'].plot(\n","            kind='barh',\n","            color='red',\n","            alpha=0.7,\n","            title='特征分布漂移检测 (KS 统计量)'\n","        )\n","        ax.set_xlabel('KS 统计量')\n","        ax.set_ylabel('特征名称')\n","\n","        # 添加数值标签\n","        for i, v in enumerate(drifted_features['ks_statistic']):\n","            ax.text(v + 0.01, i, f'{v:.3f}', va='center')\n","\n","        plt.tight_layout()\n","        plt.show()\n","    else:\n","        print(\"✅ 未检测到特征分布漂移\")\n","\n","    return drift_report\n","\n","# 4. 执行漂移检测\n","drift_report = detect_data_drift(X_train, X_test)\n","\n","# 5. 打印结果摘要\n","print(\"\\n=== 特征分布漂移摘要 ===\")\n","for feature, stats in drift_report.items():\n","    if stats['drift_detected']:\n","        print(f\"⚠️ {feature}: 漂移显著 (KS={stats['ks_statistic']:.3f}, p={stats['p_value']:.3f})\")\n","    else:\n","        print(f\"✅ {feature}: 无显著漂移 (KS={stats['ks_statistic']:.3f}, p={stats['p_value']:.3f})\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9hCLNsh4Afi3","executionInfo":{"status":"ok","timestamp":1750099270282,"user_tz":-480,"elapsed":1045,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"f4a60331-af1b-47ec-f74d-178fcfca66c7"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ 未检测到特征分布漂移\n","\n","=== 特征分布漂移摘要 ===\n","✅ feature_0: 无显著漂移 (KS=0.079, p=0.266)\n","✅ feature_1: 无显著漂移 (KS=0.064, p=0.522)\n","✅ feature_2: 无显著漂移 (KS=0.070, p=0.402)\n","✅ feature_3: 无显著漂移 (KS=0.090, p=0.144)\n","✅ feature_4: 无显著漂移 (KS=0.104, p=0.061)\n","✅ feature_5: 无显著漂移 (KS=0.062, p=0.547)\n","✅ feature_6: 无显著漂移 (KS=0.064, p=0.522)\n","✅ feature_7: 无显著漂移 (KS=0.059, p=0.626)\n","✅ feature_8: 无显著漂移 (KS=0.050, p=0.808)\n","✅ feature_9: 无显著漂移 (KS=0.077, p=0.283)\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tmOm70Y9CH__","executionInfo":{"status":"ok","timestamp":1750099091554,"user_tz":-480,"elapsed":25,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"0fce2d59-14d1-42a6-dda1-caaaa330bbdd"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["🔵 数据验证:\n","X_test 形状: (200, 10)\n","X_test 类型: <class 'pandas.core.frame.DataFrame'>\n","X_test 列名: ['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4']...\n","y_test 类别分布: 0    112\n","1     88\n","Name: count, dtype: int64\n","🔴 步骤1：函数已进入\n","🔴 X_test 类型: <class 'pandas.core.frame.DataFrame'>, 形状: (200, 10)\n","🔴 步骤2：预测概率完成，形状: (200,)\n","🔴 步骤3：高风险索引: [103 145 114 165 187]\n","🔴 步骤4.1：处理样本索引 103\n","🚨 高风险样本 1/5（索引:103，概率:100.00%）\n","关键特征影响:\n","                 256\n","feature_3  0.404996\n","feature_6  0.169540\n","feature_5  0.120569\n","样本详情:\n"," {'feature_0': 0.09201879748338249, 'feature_1': 1.2273943957466198, 'feature_2': -2.8843243671782015, 'feature_3': 3.1842582393824945, 'feature_4': -0.9973100461876464, 'feature_5': 0.7517903247683707, 'feature_6': 2.459941621427426, 'feature_7': -0.4630639442340176, 'feature_8': 0.01682506628781065, 'feature_9': -4.49737899993719}\n","🔴 步骤4.2：处理样本索引 145\n","🚨 高风险样本 2/5（索引:145，概率:100.00%）\n","关键特征影响:\n","                 914\n","feature_5  0.209429\n","feature_0  0.201142\n","feature_1  0.098021\n","样本详情:\n"," {'feature_0': 1.3876299453143819, 'feature_1': 1.8806466104433253, 'feature_2': -1.343125267644541, 'feature_3': 0.694463542375136, 'feature_4': -1.137050344353618, 'feature_5': 1.3058579806462185, 'feature_6': 0.9774423117820324, 'feature_7': -1.9223141054539656, 'feature_8': 0.7111924534215757, 'feature_9': -2.558687612927525}\n","🔴 步骤4.3：处理样本索引 114\n","🚨 高风险样本 3/5（索引:114，概率:99.99%）\n","关键特征影响:\n","                  86\n","feature_9  0.591129\n","feature_4  0.556785\n","feature_0  0.158487\n","样本详情:\n"," {'feature_0': 1.0933579826418902, 'feature_1': -0.11538401334411441, 'feature_2': -0.3319944588800761, 'feature_3': -1.494870606745098, 'feature_4': 2.477000143270169, 'feature_5': -1.5424652454718104, 'feature_6': 0.3014056422692204, 'feature_7': 1.3213162028034042, 'feature_8': -0.20758434514303986, 'feature_9': 3.6064414429317364}\n","🔴 步骤4.4：处理样本索引 165\n","🚨 高风险样本 4/5（索引:165，概率:99.99%）\n","关键特征影响:\n","                 668\n","feature_9  0.673371\n","feature_4  0.478950\n","feature_0  0.155558\n","样本详情:\n"," {'feature_0': 1.0731551421867005, 'feature_1': -1.3334598465172627, 'feature_2': 0.5463317060017511, 'feature_3': -1.353424020629587, 'feature_4': 2.1307279297062407, 'feature_5': -0.8519543947775549, 'feature_6': 0.4442738392271867, 'feature_7': -0.19544187379288433, 'feature_8': 0.6518648526930954, 'feature_9': 4.108193546648404}\n","🔴 步骤4.5：处理样本索引 187\n","🚨 高风险样本 5/5（索引:187，概率:99.98%）\n","关键特征影响:\n","                 365\n","feature_5  0.394715\n","feature_0  0.125225\n","feature_6  0.070039\n","样本详情:\n"," {'feature_0': 0.863896043515522, 'feature_1': 0.9396504326844408, 'feature_2': -0.14990111465838005, 'feature_3': 0.3406233851552868, 'feature_4': -1.2891773153171942, 'feature_5': 2.4611810017295066, 'feature_6': 1.0162360736423395, 'feature_7': -0.49057083488586584, 'feature_8': -0.35845550683681077, 'feature_9': -2.289539127928624}\n"]}]},{"cell_type":"code","source":["from xgboost import XGBClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import make_classification\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# 生成测试数据\n","X, y = make_classification(n_samples=1000, n_features=10, random_state=42)\n","X = pd.DataFrame(X)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# 定义并训练 best_model\n","best_model = XGBClassifier(n_estimators=100, random_state=42).fit(X_train, y_train)\n","\n","def plot_feature_importance(best_model, X_train):\n","    feat_importance = pd.Series(\n","        best_model.feature_importances_,\n","        index=X_train.columns\n","    ).sort_values(ascending=False)\n","\n","    plt.figure(figsize=(10, 6))\n","    sns.barplot(\n","        x=feat_importance.values,\n","        y=feat_importance.index,\n","        color='royalblue'\n","    )\n","    plt.xlabel('特征重要性（增益）')\n","    plt.title('XGBoost Feature importance ranking')\n","    plt.show()\n","\n","# 执行\n","plot_feature_importance(best_model, X_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":876},"id":"-nkdk2UuCN_Y","executionInfo":{"status":"ok","timestamp":1750279177314,"user_tz":-480,"elapsed":828,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"6661ef86-392d-4ea4-fbd1-a0d8dfbbda6b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 29305 (\\N{CJK UNIFIED IDEOGRAPH-7279}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24449 (\\N{CJK UNIFIED IDEOGRAPH-5F81}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 37325 (\\N{CJK UNIFIED IDEOGRAPH-91CD}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 35201 (\\N{CJK UNIFIED IDEOGRAPH-8981}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 24615 (\\N{CJK UNIFIED IDEOGRAPH-6027}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 65288 (\\N{FULLWIDTH LEFT PARENTHESIS}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 22686 (\\N{CJK UNIFIED IDEOGRAPH-589E}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 30410 (\\N{CJK UNIFIED IDEOGRAPH-76CA}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 65289 (\\N{FULLWIDTH RIGHT PARENTHESIS}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import shap\n","\n","def plot_shap_explanation(best_model, X_test):\n","    \"\"\"\n","    用 p 展示模型解释\n","    \"\"\"\n","    explainer = shap.TreeExplainer(best_model)\n","    shap_values = explainer.shap_values(X_test)\n","\n","    # 全局特征影响\n","    shap.summary_plot(\n","        shap_values,\n","        X_test,\n","        feature_names=X_test.columns,\n","        plot_type='bar',\n","        max_display=10\n","    )\n","\n","    # 单个样本解释（取第一个高风险样本）\n","    y_probs = best_model.predict_proba(X_test)[:, 1]\n","    high_risk_idx = y_probs.argmax()\n","\n","    shap.force_plot(\n","        explainer.expected_value,\n","        shap_values[high_risk_idx, :],\n","        X_test.iloc[high_risk_idx, :],\n","        feature_names=X_test.columns\n","    )\n","\n","# 执行（需安装 shap: pip install shap）\n","plot_shap_explanation(best_model, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":557},"id":"8jbOlEksP2K1","executionInfo":{"status":"ok","timestamp":1750279181208,"user_tz":-480,"elapsed":594,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"59eaffc1-5988-4a66-9636-b340c802125e"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, roc_curve, auc\n","\n","def plot_model_metrics(y_test, y_pred_probs):\n","    \"\"\"\n","    绘制混淆矩阵 + ROC 曲线\n","    \"\"\"\n","    y_pred = (y_pred_probs > 0.5).astype(int)  # 0.5 为阈值\n","\n","    # 混淆矩阵\n","    plt.figure(figsize=(12, 5))\n","    plt.subplot(1, 2, 1)\n","    cm = confusion_matrix(y_test, y_pred)\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","                xticklabels=['low risk', 'High risk'],\n","                yticklabels=['low risk', 'High risk'])\n","    plt.xlabel('Predicted labels')\n","    plt.ylabel('True label')\n","    plt.title('Confusion matrix')\n","\n","    # ROC 曲线\n","    fpr, tpr, thresholds = roc_curve(y_test, y_pred_probs)\n","    roc_auc = auc(fpr, tpr)\n","\n","    plt.subplot(1, 2, 2)\n","    plt.plot(fpr, tpr, color='darkorange', label=f'ROC (AUC = {roc_auc:.2f})')\n","    plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n","    plt.xlabel('FPR')\n","    plt.ylabel('TPR')\n","    plt.title('ROC')\n","    plt.legend()\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","# 执行\n","y_pred_probs = best_model.predict_proba(X_test)[:, 1]\n","plot_model_metrics(y_test, y_pred_probs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"YFDgBLNwRR6Q","executionInfo":{"status":"ok","timestamp":1750279182804,"user_tz":-480,"elapsed":541,"user":{"displayName":"赵智涵","userId":"12320288028787213031"}},"outputId":"3f6f85ce-3cae-44cf-ce4d-cc365e3e4705"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"2cYtxybORn_T"},"execution_count":null,"outputs":[]}]}